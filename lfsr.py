def multixor(x, n, c):
    """
    Inputs:
    x - string, seed for generator
    c - string, variables of primitibe polynomials degree n
    n - integer, length of seed
    ------------------
    Output:
    string - byte 0 or 1, result of operation XOR on seeds bytes
    """
    out = ""
    x = x[-n:]
    for i in range(n):
        if c[i] == "1":
            if out != "":
                if out == x[i]:
                    out = "0"
                else: out = "1"
            else: out = x[i]
    return out


def LFSR_body(x0, k):
    """
    Inputs:
    x0 - string, seed for generator
    k - integer, number of byte representation of seed
    ------------------
    Output:
    string - feedback from LFSR
    """
    c = ["0100001101", "10100000011", "010000000111", "0000100101001",
         "01100000000011", "001000000011001", "1001010000000001",
         "10001000000010001", "010000100000010001", "0000000011000001001",
         "00000010000010000101"]
    c = c[k-10][::-1]
    return x0[1:] + multixor(x0, k, c)

def genLFSR(x0, n, k):
    """
    Inputs:
    x0 - intiger number, seed for generator
    k - integer, number of byte representation of seed
    n - integer, length of final result
    ------------------
    Output:
    string - generated bytes from generator LFSR
    """
    out = ""
    x0 = bin(x0)[2:]
    if len(x0)> k:
        x0 = x0[:k]
    elif len(x0) < k:
        x0 = "0" * (k - len(x0)) + x0
    begin = x0
    for i in range(n):
        x0 = LFSR_body(x0, k)
        out += x0[k-1]
        if x0 == begin: print i
    return out

if __name__ == '__main__':
    for i in range(20):
        L = genLFSR(1, 20000, 20)
        fileout = open("lfsr/LFSR" +  str(i+1) + ".txt",'w')
        fileout.write(L)
        fileout.close()
    L = genLFSR(1, 1000000, 20)
    fileout = open("lfsr/LFSR_for_test_walk.txt",'w')
    fileout.write(L)
    fileout.close()
